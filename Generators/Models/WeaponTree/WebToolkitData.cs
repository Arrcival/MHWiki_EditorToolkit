// <auto-generated />
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace MediawikiTranslator.Models.WeaponTree
{
	public partial class WebToolkitData
	{
		[JsonProperty("pathName", NullValueHandling = NullValueHandling.Ignore)]
		public string PathName { get; set; }

		[JsonProperty("treeType", NullValueHandling = NullValueHandling.Ignore)]
		public string TreeType { get; set; }

		[JsonProperty("game", NullValueHandling = NullValueHandling.Ignore)]
		public string Game { get; set; }

		[JsonProperty("defaultIconType", NullValueHandling = NullValueHandling.Ignore)]
		public string DefaultIconType { get; set; }

		[JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
		public Datum[] Data { get; set; }

		public static string GetWeaponName(string abbrev)
		{
			return abbrev == null ? "Great Sword" : abbrev switch
			{
				"GS" => "Great Sword",
				"LS" => "Long Sword",
				"SnS" => "Sword and Shield",
				"DB" => "Dual Blades",
				"Hm" => "Hammer",
				"HH" => "Hunting Horn",
				"Ln" => "Lance",
				"GL" => "Gunlance",
				"SA" => "Switch Axe",
				"CB" => "Charge Blade",
				"IG" => "Insect Glaive",
				"Bo" => "Bow",
				"LBG" => "Light Bowgun",
				"HBG" => "Heavy Bowgun",
				_ => "Great Sword",
			};
		}
	}

	public partial class Datum
	{
		[JsonProperty("can-forge", NullValueHandling = NullValueHandling.Ignore)]
		public bool? CanForge { get; set; }

		[JsonProperty("can-rollback", NullValueHandling = NullValueHandling.Ignore)]
		public bool? CanRollback { get; set; }

		[JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("parent", NullValueHandling = NullValueHandling.Ignore)]
		public string Parent { get; set; }

		[JsonProperty("path-link", NullValueHandling = NullValueHandling.Ignore)]
		public string PathLink { get; set; }

		[JsonProperty("icon-type", NullValueHandling = NullValueHandling.Ignore)]
		public string IconType { get; set; }

		[JsonProperty("rarity", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Rarity { get; set; }

		[JsonProperty("attack", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Attack { get; set; }

		[JsonProperty("defense", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public string Defense { get; set; }

		[JsonProperty("element", NullValueHandling = NullValueHandling.Ignore)]
		public string Element { get; set; }

		[JsonProperty("element-damage", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? ElementDamage { get; set; }

		[JsonProperty("affinity", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Affinity { get; set; }

		[JsonProperty("decos", NullValueHandling = NullValueHandling.Ignore)]
		public string Decos { get; set; }

		[JsonProperty("sharpness", NullValueHandling = NullValueHandling.Ignore)]
		public string Sharpness { get; set; }
	}

	public class Decoration
	{
		public int Level { get; set; }
		public int Qty { get; set; }
		public bool IsRampage { get; set; }
	}

	public partial class WebToolkitData
	{
		public static WebToolkitData[] FromJson(string json) => JsonConvert.DeserializeObject<WebToolkitData[]>(json, MediawikiTranslator.Models.WeaponTree.Converter.Settings);
	}

	public static class Serialize
	{
		public static string ToJson(this WebToolkitData[] self) => JsonConvert.SerializeObject(self, MediawikiTranslator.Models.WeaponTree.Converter.Settings);
	}

	internal static class Converter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class ParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			if (string.IsNullOrEmpty(value)) return null;
			if (long.TryParse(value, out long l))
			{
				return l;
			}
			throw new Exception("An integer value you have provided is not a number.");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly ParseStringConverter Singleton = new ParseStringConverter();
	}
}
