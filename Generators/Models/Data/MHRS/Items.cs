// <auto-generated />
using System.Globalization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHRS
{
	public class Items : ItemsParam
	{
		public string Name { get; set; }
		public string Description { get; set; }
		public string WikiIconColor { get; set; }
		public string WikiIconName { get; set; }
		public static Items[] Fetch() => [..RawItems.FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHRS\natives\stm\data\system\contentsidsystem\item\normal\itemdata.user.2.json")).SnowDataItemUserData.Param.Where(x => x.IconColor != "ITEM_ICON_COLOR_00").Select(x => new Items(x))];
		public Items() { }
		public Items(ItemsParam src)
		{
			Id = src.Id;
			CariableFilter = src.CariableFilter;
			Type = src.Type;
			Rare = src.Rare;
			PlMaxCount = src.PlMaxCount;
			OtMaxCount = src.OtMaxCount;
			SortId = src.SortId;
			Supply = src.Supply;
			CanPutInOtDogPouch = src.CanPutInOtDogPouch;
			ShowItemWindow = src.ShowItemWindow;
			ShowActionWindow = src.ShowActionWindow;
			Infinite = src.Infinite;
			Default = src.Default;
			IconCanEat = src.IconCanEat;
			IconItemRank = src.IconItemRank;
			EffectRare = src.EffectRare;
			IconChara = src.IconChara;
			IconColor = src.IconColor;
			SeType = src.SeType;
			SellPrice = src.SellPrice;
			BuyPrice = src.BuyPrice;
			ItemActionType = src.ItemActionType;
			RankType = src.RankType;
			ItemGroup = src.ItemGroup;
			CategoryWorth = src.CategoryWorth;
			MaterialCategory = src.MaterialCategory;
			EvalutionValue = src.EvalutionValue;
			Name = CommonMsgs.GetMsg("I_" + src.Id.Substring(src.Id.LastIndexOf("_") + 1) + "_Name");
			WikiIconName = GetIconName(Convert.ToInt32(src.IconChara.Substring(src.IconChara.LastIndexOf("_") + 1)));
			WikiIconColor = GetIconColor(Convert.ToInt32(src.IconColor.Substring(src.IconColor.LastIndexOf("_") + 1)));
		}

		public static string GetIconColor(int colorId)
		{
			return new Dictionary<int, string>()
			{
				{ 8, "Green" },
				{ 4, "Yellow" },
				{ 11, "Dark Blue" },
				{ 12, "Light Blue" },
				{ 13, "Brown" },
				{ 6, "Vermilion" },
				{ 5, "Orange" },
				{ 2, "Gray" },
				{ 7, "Red" },
				{ 1, "White" },
				{ 9, "Purple" },
				{ 10, "Blue" },
				{ 3, "Pink" },
				{ 51, "Dark Purple" },
				{ 14, "Dark Purple" },
			}[colorId];
		}

		public static string GetIconName(int iconId)
		{
			return new Dictionary<int, string>()
			{
				{ 5, "Medicine" },
				{ 39, "Pill" },
				{ 41, "Vial" },
				{ 28, "Seed" },
				{ 21, "Smoke Bomb" },
				{ 7, "Meat" },
				{ 42, "Drug" },
				{ 43, "Sac" },
				{ 9, "Ball" },
				{ 56, "Dung" },
				{ 27, "Spit" },
				{ 6, "Whetstone" },
				{ 26, "Knife" },
				{ 38, "NOT AVAILABLE" },
				{ 13, "Barrel" },
				{ 10, "Bomb" },
				{ 4, "Herb" },
				{ 48, "Spiderweb" },
				{ 11, "Box" },
				{ 12, "Trap" },
				{ 46, "Fish" },
				{ 33, "Claw" },
				{ 3, "Webbing" },
				{ 1, "Mushroom" },
				{ 8, "Bug" },
				{ 47, "Husk" },
				{ 14, "Ammo" },
				{ 16, "Ammo Pierce" },
				{ 15, "Ammo Spread" },
				{ 17, "Ammo Sticky" },
				{ 18, "Ammo Cluster" },
				{ 19, "Bottle" },
				{ 20, "Coating" },
				{ 35, "Question Mark" },
				{ 29, "Monster Part" },
				{ 31, "Scale" },
				{ 45, "Ore" },
				{ 52, "Armor Sphere" },
				{ 53, "Decoration" },
				{ 30, "Bone" },
				{ 32, "Hide" },
				{ 44, "Chemical" },
				{ 50, "Ticket" },
				{ 55, "Shell" },
				{ 62, "Head" },
				{ 40, "Tail" },
				{ 61, "Wing" },
				{ 63, "Plate" },
				{ 75, "NOT AVAILABLE" },
				{ 49, "Coin" },
				{ 2, "Egg" },
				{ 72, "NOT AVAILABLE" },
				{ 54, "Scrap" },
				{ 73, "NOT AVAILABLE" },
				{ 84, "NOT AVAILABLE" },
				{ 0, "Pouch" },
				{ 116, "NOT AVAILABLE" },
				{ 204, "Pallium" },
				{ 203, "Shell" },
				{ 201, "NOT AVAILABLE" },
				{ 51, "Book" },
				{ 205, "NOT AVAILABLE" }
			}[iconId];
		}
	}

	public partial class RawItems
	{
		[JsonProperty("snow.data.ItemUserData", NullValueHandling = NullValueHandling.Ignore)]
		public SnowDataItemUserData SnowDataItemUserData { get; set; }
	}

	public partial class SnowDataItemUserData
	{
		[JsonProperty("_Param", NullValueHandling = NullValueHandling.Ignore)]
		public ItemsParam[] Param { get; set; }
	}

	public partial class ItemsParam
	{
		[JsonProperty("_Id", NullValueHandling = NullValueHandling.Ignore)]
		public string Id { get; set; }

		[JsonProperty("_CariableFilter", NullValueHandling = NullValueHandling.Ignore)]
		public string CariableFilter { get; set; }

		[JsonProperty("_Type", NullValueHandling = NullValueHandling.Ignore)]
		public string Type { get; set; }

		[JsonProperty("_Rare", NullValueHandling = NullValueHandling.Ignore)]
		public string Rare { get; set; }

		[JsonProperty("_PlMaxCount", NullValueHandling = NullValueHandling.Ignore)]
		public long? PlMaxCount { get; set; }

		[JsonProperty("_OtMaxCount", NullValueHandling = NullValueHandling.Ignore)]
		public long? OtMaxCount { get; set; }

		[JsonProperty("_SortId", NullValueHandling = NullValueHandling.Ignore)]
		public long? SortId { get; set; }

		[JsonProperty("_Supply", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Supply { get; set; }

		[JsonProperty("_CanPutInOtDogPouch", NullValueHandling = NullValueHandling.Ignore)]
		public bool? CanPutInOtDogPouch { get; set; }

		[JsonProperty("_ShowItemWindow", NullValueHandling = NullValueHandling.Ignore)]
		public bool? ShowItemWindow { get; set; }

		[JsonProperty("_ShowActionWindow", NullValueHandling = NullValueHandling.Ignore)]
		public bool? ShowActionWindow { get; set; }

		[JsonProperty("_Infinite", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Infinite { get; set; }

		[JsonProperty("_Default", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Default { get; set; }

		[JsonProperty("_IconCanEat", NullValueHandling = NullValueHandling.Ignore)]
		public bool? IconCanEat { get; set; }

		[JsonProperty("_IconItemRank", NullValueHandling = NullValueHandling.Ignore)]
		public string IconItemRank { get; set; }

		[JsonProperty("_EffectRare", NullValueHandling = NullValueHandling.Ignore)]
		public bool? EffectRare { get; set; }

		[JsonProperty("_IconChara", NullValueHandling = NullValueHandling.Ignore)]
		public string IconChara { get; set; }

		[JsonProperty("_IconColor", NullValueHandling = NullValueHandling.Ignore)]
		public string IconColor { get; set; }

		[JsonProperty("_SeType", NullValueHandling = NullValueHandling.Ignore)]
		public string SeType { get; set; }

		[JsonProperty("_SellPrice", NullValueHandling = NullValueHandling.Ignore)]
		public long? SellPrice { get; set; }

		[JsonProperty("_BuyPrice", NullValueHandling = NullValueHandling.Ignore)]
		public long? BuyPrice { get; set; }

		[JsonProperty("_ItemActionType", NullValueHandling = NullValueHandling.Ignore)]
		public string ItemActionType { get; set; }

		[JsonProperty("_RankType", NullValueHandling = NullValueHandling.Ignore)]
		public string RankType { get; set; }

		[JsonProperty("_ItemGroup", NullValueHandling = NullValueHandling.Ignore)]
		public string ItemGroup { get; set; }

		[JsonProperty("_CategoryWorth", NullValueHandling = NullValueHandling.Ignore)]
		public long? CategoryWorth { get; set; }

		[JsonProperty("_MaterialCategory", NullValueHandling = NullValueHandling.Ignore)]
		public string[] MaterialCategory { get; set; }

		[JsonProperty("_EvalutionValue", NullValueHandling = NullValueHandling.Ignore)]
		public long? EvalutionValue { get; set; }
	}

	public partial class RawItems
	{
		public static RawItems FromJson(string json) => JsonConvert.DeserializeObject<RawItems>(json, MediawikiTranslator.Models.Data.MHRS.ItemsConverter.Settings);
	}

	public static class ItemsSerialize
	{
		public static string ToJson(this RawItems self) => JsonConvert.SerializeObject(self, MediawikiTranslator.Models.Data.MHRS.ItemsConverter.Settings);
	}

	internal static class ItemsConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}
}
