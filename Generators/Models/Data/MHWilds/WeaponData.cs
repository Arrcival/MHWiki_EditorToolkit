// <auto-generated />
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWilds
{

	public partial class WeaponData
	{
		[JsonProperty("app.user_data.WeaponData", NullValueHandling = NullValueHandling.Ignore)]
		public AppUserDataWeaponData AppUserDataWeaponData { get; set; }

		public static WeaponData[] GetWeaponData()
		{
			Dictionary<string, CommonMsgs> msgs = CommonMsgs.Fetch();
			string[] weaponDataFiles =
			{
				"bow",
				"chargeaxe",
				"gunlance",
				"hammer",
				"heavybowgun",
				"lance",
				"lightbowgun",
				"longsword",
				"rod",
				"shortsword",
				"slashaxe",
				"tachi",
				"twinsword",
				"whistle"
			};
			List<WeaponData> ret = [];
			string folder = @"D:\MH_Data Repo\MH_Data\Raw Data\MHWilds\stm\gamedesign\common\weapon\";
			foreach (string weaponDataFile in weaponDataFiles)
			{
				WeaponData thisSrc = FromJson(File.ReadAllText(Path.Combine(folder, weaponDataFile + ".user.3.json")));
				foreach (WeaponDataValue val in thisSrc.AppUserDataWeaponData.Values)
				{
					if (val.NameId != null && !string.IsNullOrEmpty(val.NameId!.ToString()) && msgs.ContainsKey(val.NameId!.ToString()))
					{
						val.Name = msgs[val.NameId!.ToString()].Content[1];
					}
					if (val.ExplainId != null && !string.IsNullOrEmpty(val.ExplainId!.ToString()) && msgs.ContainsKey(val.ExplainId!.ToString()))
					{
						val.Explain = msgs[val.ExplainId!.ToString()].Content[1];
					}
				}
				ret.Add(thisSrc);
			}
			return [.. ret];
		}
	}

	public partial class AppUserDataWeaponData
	{
		[JsonProperty("_Values", NullValueHandling = NullValueHandling.Ignore)]
		public WeaponDataValue[] Values { get; set; }
	}

	public partial class WeaponDataValue
	{
		[JsonProperty("_Index", NullValueHandling = NullValueHandling.Ignore)]
		public long? Index { get; set; }

		[JsonProperty("_Type", NullValueHandling = NullValueHandling.Ignore)]
		public string Type { get; set; }

		[JsonProperty("_ModelId", NullValueHandling = NullValueHandling.Ignore)]
		public long? ModelId { get; set; }

		[JsonProperty("_CustomModelId", NullValueHandling = NullValueHandling.Ignore)]
		public long? CustomModelId { get; set; }

		[JsonProperty("_LongSword", NullValueHandling = NullValueHandling.Ignore)]
		public string LongSword { get; set; }

		[JsonProperty("_ShortSword", NullValueHandling = NullValueHandling.Ignore)]
		public string ShortSword { get; set; }

		[JsonProperty("_TwinSword", NullValueHandling = NullValueHandling.Ignore)]
		public string TwinSword { get; set; }

		[JsonProperty("_Tachi", NullValueHandling = NullValueHandling.Ignore)]
		public string Tachi { get; set; }

		[JsonProperty("_Hammer", NullValueHandling = NullValueHandling.Ignore)]
		public string Hammer { get; set; }

		[JsonProperty("_Whistle", NullValueHandling = NullValueHandling.Ignore)]
		public string Whistle { get; set; }

		[JsonProperty("_Lance", NullValueHandling = NullValueHandling.Ignore)]
		public string Lance { get; set; }

		[JsonProperty("_GunLance", NullValueHandling = NullValueHandling.Ignore)]
		public string GunLance { get; set; }

		[JsonProperty("_SlashAxe", NullValueHandling = NullValueHandling.Ignore)]
		public string SlashAxe { get; set; }

		[JsonProperty("_ChargeAxe", NullValueHandling = NullValueHandling.Ignore)]
		public string ChargeAxe { get; set; }

		[JsonProperty("_Rod", NullValueHandling = NullValueHandling.Ignore)]
		public string Rod { get; set; }

		[JsonProperty("_Bow", NullValueHandling = NullValueHandling.Ignore)]
		public string Bow { get; set; }

		[JsonProperty("_HeavyBowgun", NullValueHandling = NullValueHandling.Ignore)]
		public string HeavyBowgun { get; set; }

		[JsonProperty("_LightBowgun", NullValueHandling = NullValueHandling.Ignore)]
		public string LightBowgun { get; set; }

		[JsonProperty("_Name", NullValueHandling = NullValueHandling.Ignore)]
		public Guid? NameId { get; set; }

		[JsonIgnore]
		public string Name { get; set; }

		[JsonProperty("_Explain", NullValueHandling = NullValueHandling.Ignore)]
		public Guid? ExplainId { get; set; }

		[JsonIgnore]
		public string Explain { get; set; }

		[JsonProperty("_SortId", NullValueHandling = NullValueHandling.Ignore)]
		public long? SortId { get; set; }

		[JsonProperty("_Price", NullValueHandling = NullValueHandling.Ignore)]
		public long? Price { get; set; }

		[JsonProperty("_Rare", NullValueHandling = NullValueHandling.Ignore)]
		public string Rare { get; set; }

		[JsonProperty("_Attack", NullValueHandling = NullValueHandling.Ignore)]
		public long? Attack { get; set; }

		[JsonProperty("_Defense", NullValueHandling = NullValueHandling.Ignore)]
		public long? Defense { get; set; }

		[JsonProperty("_Critical", NullValueHandling = NullValueHandling.Ignore)]
		public long? Critical { get; set; }

		[JsonProperty("_Attribute", NullValueHandling = NullValueHandling.Ignore)]
		public string Attribute { get; set; }

		[JsonProperty("_AttributeValue", NullValueHandling = NullValueHandling.Ignore)]
		public long? AttributeValue { get; set; }

		[JsonProperty("_SubAttribute", NullValueHandling = NullValueHandling.Ignore)]
		public string SubAttribute { get; set; }

		[JsonProperty("_SubAttributeValue", NullValueHandling = NullValueHandling.Ignore)]
		public long? SubAttributeValue { get; set; }

		[JsonProperty("_SlotLevel", NullValueHandling = NullValueHandling.Ignore)]
		public string[] SlotLevel { get; set; }

		[JsonProperty("_RodInsectLv", NullValueHandling = NullValueHandling.Ignore)]
		public string RodInsectLv { get; set; }

		[JsonProperty("_Wp08BinType", NullValueHandling = NullValueHandling.Ignore)]
		public string Wp08BinType { get; set; }

		[JsonProperty("_Wp08BinValue", NullValueHandling = NullValueHandling.Ignore)]
		public long? Wp08BinValue { get; set; }

		[JsonProperty("_Wp09BinType", NullValueHandling = NullValueHandling.Ignore)]
		public string Wp09BinType { get; set; }

		[JsonProperty("_Wp05UniqueType", NullValueHandling = NullValueHandling.Ignore)]
		public string Wp05UniqueType { get; set; }

		[JsonProperty("_Wp05MusicSkillHighFreqType", NullValueHandling = NullValueHandling.Ignore)]
		public string Wp05MusicSkillHighFreqType { get; set; }

		[JsonProperty("_Wp05HibikiSkillType", NullValueHandling = NullValueHandling.Ignore)]
		public string Wp05HibikiSkillType { get; set; }

		[JsonProperty("_MainShell", NullValueHandling = NullValueHandling.Ignore)]
		public string MainShell { get; set; }

		[JsonProperty("_ShellLv", NullValueHandling = NullValueHandling.Ignore)]
		public string[] ShellLv { get; set; }

		[JsonProperty("_ShellNum", NullValueHandling = NullValueHandling.Ignore)]
		public long[] ShellNum { get; set; }

		[JsonProperty("_RapidShellNum", NullValueHandling = NullValueHandling.Ignore)]
		public long[] RapidShellNum { get; set; }

		[JsonProperty("_IsRappid", NullValueHandling = NullValueHandling.Ignore)]
		public bool[] IsRappid { get; set; }

		[JsonProperty("_CustomizePattern", NullValueHandling = NullValueHandling.Ignore)]
		public string[] CustomizePattern { get; set; }

		[JsonProperty("_Wp13SpecialAmmo", NullValueHandling = NullValueHandling.Ignore)]
		public string Wp13SpecialAmmo { get; set; }

		[JsonProperty("_EnergyEfficiency", NullValueHandling = NullValueHandling.Ignore)]
		public string EnergyEfficiency { get; set; }

		[JsonProperty("_AmmoStrength", NullValueHandling = NullValueHandling.Ignore)]
		public string AmmoStrength { get; set; }

		[JsonProperty("_EnergyShellTypeNormal", NullValueHandling = NullValueHandling.Ignore)]
		public string EnergyShellTypeNormal { get; set; }

		[JsonProperty("_EnergyShellTypePower", NullValueHandling = NullValueHandling.Ignore)]
		public string EnergyShellTypePower { get; set; }

		[JsonProperty("_EnergyShellTypeWeak", NullValueHandling = NullValueHandling.Ignore)]
		public string EnergyShellTypeWeak { get; set; }

		[JsonProperty("_DispSilencer", NullValueHandling = NullValueHandling.Ignore)]
		public bool? DispSilencer { get; set; }

		[JsonProperty("_DispBarrel", NullValueHandling = NullValueHandling.Ignore)]
		public bool? DispBarrel { get; set; }

		[JsonProperty("_isLoadingBin", NullValueHandling = NullValueHandling.Ignore)]
		public bool[] IsLoadingBin { get; set; }

		[JsonProperty("_SharpnessValList", NullValueHandling = NullValueHandling.Ignore)]
		public long[] SharpnessValList { get; set; }

		[JsonProperty("_TakumiValList", NullValueHandling = NullValueHandling.Ignore)]
		public long[] TakumiValList { get; set; }

		[JsonProperty("_Wp07ShellType", NullValueHandling = NullValueHandling.Ignore)]
		public string Wp07ShellType { get; set; }

		[JsonProperty("_Wp07ShellLv", NullValueHandling = NullValueHandling.Ignore)]
		public string Wp07ShellLv { get; set; }

		[JsonProperty("_Skill", NullValueHandling = NullValueHandling.Ignore)]
		public string[] Skill { get; set; }

		[JsonProperty("_SkillLevel", NullValueHandling = NullValueHandling.Ignore)]
		public long[] SkillLevel { get; set; }
	}

	public partial class WeaponData
	{
		public static WeaponData FromJson(string json) => JsonConvert.DeserializeObject<WeaponData>(json, MediawikiTranslator.Models.Data.MHWilds.WeaponDataConverter.Settings);
	}

	internal static class WeaponDataConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}
}
