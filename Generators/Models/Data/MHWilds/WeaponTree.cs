// <auto-generated />
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWilds
{

	public partial class WeaponTree
	{
		[JsonProperty("app.user_data.WeaponTree", NullValueHandling = NullValueHandling.Ignore)]
		public AppUserDataWeaponTree AppUserDataWeaponTree { get; set; }
		public static WeaponTree[] GetWeaponTrees()
		{
			WeaponData[] allWeapons = WeaponData.GetWeaponData();
			Dictionary<string, CommonMsgs> msgs = CommonMsgs.Fetch();
			string[] weaponDataFiles =
			{
				"bow",
				"chargeaxe",
				"gunlance",
				"hammer",
				"heavybowgun",
				"lance",
				"lightbowgun",
				"longsword",
				"rod",
				"shortsword",
				"slashaxe",
				"tachi",
				"twinsword",
				"whistle"
			};
			List<WeaponTree> ret = [];
			string folder = @"D:\MH_Data Repo\MH_Data\Raw Data\MHWilds\stm\gamedesign\common\weapon\";
			foreach (string weaponDataFile in weaponDataFiles)
			{
				WeaponTree thisSrc = FromJson(File.ReadAllText(Path.Combine(folder, weaponDataFile + "tree.user.3.json")));
				foreach (WeaponTreeList val in thisSrc.AppUserDataWeaponTree.WeaponTreeList)
				{
					if (val.WeaponId != null)
					{
						if (allWeapons.Any(x => x.AppUserDataWeaponData.Values.Any(y => y.Index == val.WeaponId)))
						{
							val.ThisWeapon = allWeapons.First(x => x.AppUserDataWeaponData.Values.Any(y => y.Index == val.WeaponId)).AppUserDataWeaponData.Values.First(y => y.Index == val.WeaponId);
						}
					}
					if (val.PreDataGuidList != null)
					{
						WeaponDataValue[] preVals = new WeaponDataValue[val.PreDataGuidList.Length];
						int cnt = 0;
						foreach (Guid pre in val.PreDataGuidList)
						{
							if (thisSrc.AppUserDataWeaponTree.WeaponTreeList.Any(x => x.Guid != null && x.Guid == pre))
							{
								WeaponTreeList preList = thisSrc.AppUserDataWeaponTree.WeaponTreeList.First(x => x.Guid != null && x.Guid == pre);
								if (allWeapons.Any(x => x.AppUserDataWeaponData.Values.Any(y => y.Index == preList.WeaponId)))
								{
									preVals[cnt] = allWeapons.First(x => x.AppUserDataWeaponData.Values.Any(y => y.Index == preList.WeaponId)).AppUserDataWeaponData.Values.First(y => y.Index == preList.WeaponId);
								}
							}
							cnt++;
						}
						val.PreWeaponList = preVals;
					}
					if (val.NextDataGuidList != null)
					{
						WeaponDataValue[] nextVals = new WeaponDataValue[val.NextDataGuidList.Length];
						int cnt = 0;
						foreach (Guid pre in val.NextDataGuidList)
						{
							if (thisSrc.AppUserDataWeaponTree.WeaponTreeList.Any(x => x.Guid != null && x.Guid == pre))
							{
								WeaponTreeList preList = thisSrc.AppUserDataWeaponTree.WeaponTreeList.First(x => x.Guid != null && x.Guid == pre);
								if (allWeapons.Any(x => x.AppUserDataWeaponData.Values.Any(y => y.Index == preList.WeaponId)))
								{
									nextVals[cnt] = allWeapons.First(x => x.AppUserDataWeaponData.Values.Any(y => y.Index == preList.WeaponId)).AppUserDataWeaponData.Values.First(y => y.Index == preList.WeaponId);
								}
							}
							cnt++;
						}
						val.NextWeaponList = nextVals;
					}
				}
				ret.Add(thisSrc);
			}
			return [.. ret];
		}
	}

	public partial class AppUserDataWeaponTree
	{
		[JsonProperty("_Version", NullValueHandling = NullValueHandling.Ignore)]
		public long? Version { get; set; }

		[JsonProperty("_WeaponType", NullValueHandling = NullValueHandling.Ignore)]
		public long? WeaponType { get; set; }

		[JsonProperty("_WeaponTreeList", NullValueHandling = NullValueHandling.Ignore)]
		public WeaponTreeList[] WeaponTreeList { get; set; }

		[JsonProperty("_ColumnDataList", NullValueHandling = NullValueHandling.Ignore)]
		public ColumnDataList[] ColumnDataList { get; set; }

		[JsonProperty("_RowDataList", NullValueHandling = NullValueHandling.Ignore)]
		public RowDataList[] RowDataList { get; set; }
	}

	public partial class ColumnDataList
	{
		[JsonProperty("_Guid", NullValueHandling = NullValueHandling.Ignore)]
		public Guid? Guid { get; set; }

		[JsonProperty("_StoryFlag", NullValueHandling = NullValueHandling.Ignore)]
		public long? StoryFlag { get; set; }

		[JsonProperty("_ColumnLevel", NullValueHandling = NullValueHandling.Ignore)]
		public long? ColumnLevel { get; set; }
	}

	public partial class RowDataList
	{
		[JsonProperty("_Guid", NullValueHandling = NullValueHandling.Ignore)]
		public Guid? Guid { get; set; }

		[JsonProperty("_Series", NullValueHandling = NullValueHandling.Ignore)]
		public long? Series { get; set; }

		[JsonProperty("_RowLevel", NullValueHandling = NullValueHandling.Ignore)]
		public long? RowLevel { get; set; }
	}

	public partial class WeaponTreeList
	{
		[JsonProperty("_Enable", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Enable { get; set; }

		[JsonProperty("_Version", NullValueHandling = NullValueHandling.Ignore)]
		public long? Version { get; set; }

		[JsonProperty("_WeaponID", NullValueHandling = NullValueHandling.Ignore)]
		public long? WeaponId { get; set; }

		[JsonProperty("_NextDataGuidList", NullValueHandling = NullValueHandling.Ignore)]
		public Guid[] NextDataGuidList { get; set; }

		[JsonIgnore]
		public WeaponDataValue[] NextWeaponList { get; set; }

		[JsonProperty("_PreDataGuidList", NullValueHandling = NullValueHandling.Ignore)]
		public Guid[] PreDataGuidList { get; set; }

		[JsonIgnore]
		public WeaponDataValue[] PreWeaponList { get; set; }

		[JsonProperty("_Guid", NullValueHandling = NullValueHandling.Ignore)]
		public Guid? Guid { get; set; }

		[JsonIgnore]
		public WeaponDataValue ThisWeapon { get; set; }

		[JsonProperty("_ColumnDataLevel", NullValueHandling = NullValueHandling.Ignore)]
		public long? ColumnDataLevel { get; set; }

		[JsonProperty("_RowDataLevel", NullValueHandling = NullValueHandling.Ignore)]
		public long? RowDataLevel { get; set; }
	}

	public partial class WeaponTree
	{
		public static WeaponTree FromJson(string json) => JsonConvert.DeserializeObject<WeaponTree>(json, MediawikiTranslator.Models.Data.MHWilds.WeaponTreeConverter.Settings);
	}

	internal static class WeaponTreeConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}
}
