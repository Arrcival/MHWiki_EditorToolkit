// <auto-generated />
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWilds
{

	public partial class Items
	{
		[JsonProperty("app.user_data.ItemData", NullValueHandling = NullValueHandling.Ignore)]
		public AppUserDataItemData AppUserDataItemData { get; set; }

		public static Items GetItems()
		{
			Dictionary<string, CommonMsgs> msgs = CommonMsgs.Fetch();
			Items src = FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWilds\stm\gamedesign\common\item\itemdata.user.3.json"));
			foreach (ItemsValue val in src.AppUserDataItemData.Values)
			{
				if (msgs.ContainsKey(val.RawName!.ToString()))
				{
					val.Name = msgs[val.RawName!.ToString()].Content[1];
				}
				if (msgs.ContainsKey(val.RawExplain!.ToString()))
				{
					val.Explain = msgs[val.RawExplain!.ToString()].Content[1];
				}
			}
			return src;
		}
	}

	public partial class AppUserDataItemData
	{
		[JsonProperty("_Values", NullValueHandling = NullValueHandling.Ignore)]
		public ItemsValue[] Values { get; set; }
	}

	public partial class ItemsValue
	{
		[JsonProperty("_Index", NullValueHandling = NullValueHandling.Ignore)]
		public long? Index { get; set; }

		[JsonProperty("_ItemId", NullValueHandling = NullValueHandling.Ignore)]
		public string ItemId { get; set; }

		[JsonProperty("_RawName", NullValueHandling = NullValueHandling.Ignore)]
		public Guid? RawName { get; set; }

		[JsonProperty("_RawExplain", NullValueHandling = NullValueHandling.Ignore)]
		public Guid? RawExplain { get; set; }

		[JsonProperty("_SortId", NullValueHandling = NullValueHandling.Ignore)]
		public long? SortId { get; set; }

		[JsonProperty("_Type", NullValueHandling = NullValueHandling.Ignore)]
		public string Type { get; set; }

		[JsonProperty("_TextType", NullValueHandling = NullValueHandling.Ignore)]
		public string TextType { get; set; }

		[JsonProperty("_IconType", NullValueHandling = NullValueHandling.Ignore)]
		public string IconType { get; set; }

		[JsonProperty("_EquipIcon", NullValueHandling = NullValueHandling.Ignore)]
		public string EquipIcon { get; set; }

		[JsonProperty("_IconColor", NullValueHandling = NullValueHandling.Ignore)]
		public string IconColor { get; set; }

		[JsonProperty("_AddIconType", NullValueHandling = NullValueHandling.Ignore)]
		public string AddIconType { get; set; }

		[JsonProperty("_Rare", NullValueHandling = NullValueHandling.Ignore)]
		public string Rare { get; set; }

		[JsonProperty("_MaxCount", NullValueHandling = NullValueHandling.Ignore)]
		public long? MaxCount { get; set; }

		[JsonProperty("_OtomoMax", NullValueHandling = NullValueHandling.Ignore)]
		public long? OtomoMax { get; set; }

		[JsonProperty("_EnableOnRaptor", NullValueHandling = NullValueHandling.Ignore)]
		public bool? EnableOnRaptor { get; set; }

		[JsonProperty("_SellPrice", NullValueHandling = NullValueHandling.Ignore)]
		public long? SellPrice { get; set; }

		[JsonProperty("_BuyPrice", NullValueHandling = NullValueHandling.Ignore)]
		public long? BuyPrice { get; set; }

		[JsonProperty("_Fix", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Fix { get; set; }

		[JsonProperty("_Shikyu", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Shikyu { get; set; }

		[JsonProperty("_Eatable", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Eatable { get; set; }

		[JsonProperty("_Window", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Window { get; set; }

		[JsonProperty("_Infinit", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Infinit { get; set; }

		[JsonProperty("_Heal", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Heal { get; set; }

		[JsonProperty("_Battle", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Battle { get; set; }

		[JsonProperty("_Special", NullValueHandling = NullValueHandling.Ignore)]
		public bool? Special { get; set; }

		[JsonProperty("_ForMoney", NullValueHandling = NullValueHandling.Ignore)]
		public bool? ForMoney { get; set; }

		[JsonProperty("_OutBox", NullValueHandling = NullValueHandling.Ignore)]
		public bool? OutBox { get; set; }

		[JsonProperty("_NonLevelShell", NullValueHandling = NullValueHandling.Ignore)]
		public bool? NonLevelShell { get; set; }

		[JsonProperty("_GetRank", NullValueHandling = NullValueHandling.Ignore)]
		public string[] GetRank { get; set; }

		[JsonIgnore]
		public string Name { get; set; }

		[JsonIgnore]
		public string Explain { get; set; }
	}

	public partial class Items
	{
		public static Items FromJson(string json) => JsonConvert.DeserializeObject<Items>(json, MediawikiTranslator.Models.Data.MHWilds.ItemsConverter.Settings);
	}

	internal static class ItemsConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}
}
