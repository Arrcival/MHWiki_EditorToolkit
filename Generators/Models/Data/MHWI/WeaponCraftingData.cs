// <auto-generated />
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace MediawikiTranslator.Models.Data.MHWI
{
	public partial class WeaponCraftingData
	{
		[JsonProperty("Index", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Index { get; set; }

		[JsonProperty("EquipmentCategory", NullValueHandling = NullValueHandling.Ignore)]
		public string EquipmentCategory { get; set; }

		[JsonProperty("EquipmentId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? EquipmentId { get; set; }

		[JsonProperty("EquipmentName", NullValueHandling = NullValueHandling.Ignore)]
		public string EquipmentName { get; set; }

		[JsonProperty("ItemUnlockId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? ItemUnlockId { get; set; }

		[JsonProperty("ItemUnlockName", NullValueHandling = NullValueHandling.Ignore)]
		public string ItemUnlockName { get; set; }

		[JsonProperty("MonsterUnlockId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? MonsterUnlockId { get; set; }

		[JsonProperty("MonsterUnlockName", NullValueHandling = NullValueHandling.Ignore)]
		public string MonsterUnlockName { get; set; }

		[JsonProperty("StoryUnlock", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? StoryUnlock { get; set; }

		[JsonProperty("Rank", NullValueHandling = NullValueHandling.Ignore)]
		public string Rank { get; set; }

		[JsonProperty("Mat1Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Mat1Id { get; set; }

		[JsonProperty("Mat2Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat2Name { get; set; }

		[JsonProperty("Mat1Count", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Mat1Count { get; set; }

		[JsonProperty("Mat2Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Mat2Id { get; set; }

		[JsonProperty("Mat2Count", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Mat2Count { get; set; }

		[JsonProperty("Mat3Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Mat3Id { get; set; }

		[JsonProperty("Mat3Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat3Name { get; set; }

		[JsonProperty("Mat3Count", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Mat3Count { get; set; }

		[JsonProperty("Mat4Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Mat4Id { get; set; }

		[JsonProperty("Mat4Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat4Name { get; set; }

		[JsonProperty("Mat4Count", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Mat4Count { get; set; }

		[JsonProperty("ChildIndex1", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? ChildIndex1 { get; set; }

		[JsonProperty("ChildIndex2", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? ChildIndex2 { get; set; }

		[JsonProperty("ChildIndex3", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? ChildIndex3 { get; set; }

		[JsonProperty("ChildIndex4", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? ChildIndex4 { get; set; }

		[JsonProperty("Unk1", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Unk1 { get; set; }

		[JsonProperty("Unk2", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Unk2 { get; set; }

		[JsonProperty("Unk3", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Unk3 { get; set; }

		[JsonProperty("Unk4", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponCraftingDataParseStringConverter))]
		public long? Unk4 { get; set; }

		public static WeaponCraftingData[] GetCraftingData()
		{
			return FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\weaponcrafting.json"));
		}
	}

	public partial class WeaponCraftingData
	{
		public static WeaponCraftingData[] FromJson(string json) => JsonConvert.DeserializeObject<WeaponCraftingData[]>(json, MediawikiTranslator.Models.Data.MHWI.WeaponCraftingDataConverter.Settings);
	}

	internal static class WeaponCraftingDataConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class WeaponCraftingDataParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly WeaponCraftingDataParseStringConverter Singleton = new WeaponCraftingDataParseStringConverter();
	}
}
