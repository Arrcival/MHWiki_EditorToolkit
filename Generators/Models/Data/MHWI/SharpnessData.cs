// <auto-generated />
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWI
{

	public partial class SharpnessData
	{
		[JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SharpnessDataParseStringConverter))]
		public long? Id { get; set; }

		[JsonProperty("Red", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SharpnessDataParseStringConverter))]
		public long? Red { get; set; }

		[JsonProperty("Orange", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SharpnessDataParseStringConverter))]
		public long? Orange { get; set; }

		[JsonProperty("Yellow", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SharpnessDataParseStringConverter))]
		public long? Yellow { get; set; }

		[JsonProperty("Green", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SharpnessDataParseStringConverter))]
		public long? Green { get; set; }

		[JsonProperty("Blue", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SharpnessDataParseStringConverter))]
		public long? Blue { get; set; }

		[JsonProperty("White", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SharpnessDataParseStringConverter))]
		public long? White { get; set; }

		[JsonProperty("Purple", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SharpnessDataParseStringConverter))]
		public long? Purple { get; set; }

		public static SharpnessData[] GetSharpnessData()
		{
			return FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\sharpnessdata.json"));
		}
	}

	public partial class SharpnessData
	{
		public static SharpnessData[] FromJson(string json) => JsonConvert.DeserializeObject<SharpnessData[]>(json, MediawikiTranslator.Models.Data.MHWI.SharpnessDataConverter.Settings);
	}

	internal static class SharpnessDataConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class SharpnessDataParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly SharpnessDataParseStringConverter Singleton = new SharpnessDataParseStringConverter();
	}
}
