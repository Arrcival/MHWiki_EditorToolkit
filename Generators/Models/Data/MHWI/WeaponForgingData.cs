// <auto-generated />
	using System.Globalization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWI
{

	public partial class WeaponForgingData
	{
		[JsonProperty("Index", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Index { get; set; }

		[JsonProperty("EquipmentType", NullValueHandling = NullValueHandling.Ignore)]
		public string EquipmentType { get; set; }

		[JsonProperty("EquipmentIndex", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? EquipmentIndex { get; set; }

		[JsonProperty("EquipmentName", NullValueHandling = NullValueHandling.Ignore)]
		public string EquipmentName { get; set; }

		[JsonProperty("ItemToUnlockId", NullValueHandling = NullValueHandling.Ignore)]
		public string ItemToUnlockId { get; set; }

		[JsonProperty("MonsterToUnlockId", NullValueHandling = NullValueHandling.Ignore)]
		public string MonsterToUnlockId { get; set; }

		[JsonProperty("StoryUnlock", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? StoryUnlock { get; set; }

		[JsonProperty("Unk1", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Unk1 { get; set; }

		[JsonProperty("ItemRank", NullValueHandling = NullValueHandling.Ignore)]
		public string ItemRank { get; set; }

		[JsonProperty("Mat1Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Mat1Id { get; set; }

		[JsonProperty("Mat1Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat1Name { get; set; }

		[JsonProperty("Mat1Count", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Mat1Count { get; set; }

		[JsonProperty("Mat2Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Mat2Id { get; set; }

		[JsonProperty("Mat2Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat2Name { get; set; }

		[JsonProperty("Mat2Count", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Mat2Count { get; set; }

		[JsonProperty("Mat3Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Mat3Id { get; set; }

		[JsonProperty("Mat3Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat3Name { get; set; }

		[JsonProperty("Mat3Count", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Mat3Count { get; set; }

		[JsonProperty("Mat4Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Mat4Id { get; set; }

		[JsonProperty("Mat4Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Mat4Name { get; set; }

		[JsonProperty("Mat4Count", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Mat4Count { get; set; }

		[JsonProperty("Unk2", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Unk2 { get; set; }

		[JsonProperty("Unk3", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Unk3 { get; set; }

		[JsonProperty("Unk4", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Unk4 { get; set; }

		[JsonProperty("Unk5", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(WeaponForgingDataParseStringConverter))]
		public long? Unk5 { get; set; }
		public static WeaponForgingData[] GetForgingData()
		{
			return FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\weaponforging.json"));
		}
	}

	public partial class WeaponForgingData
	{
		public static WeaponForgingData[] FromJson(string json) => JsonConvert.DeserializeObject<WeaponForgingData[]>(json, MediawikiTranslator.Models.Data.MHWI.Converter.Settings);
	}

	internal static class WeaponForgingDataConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class WeaponForgingDataParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly WeaponForgingDataParseStringConverter Singleton = new WeaponForgingDataParseStringConverter();
	}
}
