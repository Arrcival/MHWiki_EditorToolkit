// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MediawikiTranslator.Models.Data.MHWI;
//
//    var skills = Skills.FromJson(jsonString);

namespace MediawikiTranslator.Models.Data.MHWI
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class Skills
	{
		[JsonProperty("Index", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SkillsParseStringConverter))]
		public long? Index { get; set; }

		[JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
		public string Id { get; set; }

		[JsonProperty("Level", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SkillsParseStringConverter))]
		public long? Level { get; set; }

		[JsonProperty("UnlockSkill1", NullValueHandling = NullValueHandling.Ignore)]
		public string UnlockSkill1 { get; set; }

		[JsonProperty("UnlockSkill2", NullValueHandling = NullValueHandling.Ignore)]
		public string UnlockSkill2 { get; set; }

		[JsonProperty("UnlockSkill3", NullValueHandling = NullValueHandling.Ignore)]
		public string UnlockSkill3 { get; set; }

		[JsonProperty("UnlockSkill4", NullValueHandling = NullValueHandling.Ignore)]
		public string UnlockSkill4 { get; set; }

		[JsonProperty("UnlockSkill5", NullValueHandling = NullValueHandling.Ignore)]
		public string UnlockSkill5 { get; set; }

		[JsonProperty("UnlockSkill6", NullValueHandling = NullValueHandling.Ignore)]
		public string UnlockSkill6 { get; set; }

		[JsonProperty("Param5", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SkillsParseStringConverter))]
		public long? Param5 { get; set; }

		[JsonProperty("Param6", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SkillsParseStringConverter))]
		public long? Param6 { get; set; }

		[JsonProperty("Param7", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SkillsParseStringConverter))]
		public long? Param7 { get; set; }

		[JsonProperty("Param8", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(SkillsParseStringConverter))]
		public long? Param8 { get; set; }

		[JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
		public string Description { get; set; }

		public static Skills[] GetSkills()
		{
			return FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\skillbase.json"));
		}
	}

	public partial class Skills
	{
		public static Skills[] FromJson(string json) => JsonConvert.DeserializeObject<Skills[]>(json, MediawikiTranslator.Models.Data.MHWI.SkillsConverter.Settings);
	}

	internal static class SkillsConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class SkillsParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly SkillsParseStringConverter Singleton = new SkillsParseStringConverter();
	}
}
