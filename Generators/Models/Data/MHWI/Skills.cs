// <auto-generated />
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWI
{

	public partial class Skills
	{
		[JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Id { get; set; }

		[JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("Level", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(ParseStringConverter))]
		public long? Level { get; set; }

		[JsonProperty("Unlock Skill 1", NullValueHandling = NullValueHandling.Ignore)]
		public UnlockSkill1? UnlockSkill1 { get; set; }

		[JsonProperty("Unlock Skill 2", NullValueHandling = NullValueHandling.Ignore)]
		public UnlockSkill? UnlockSkill2 { get; set; }

		[JsonProperty("Unlock Skill 3", NullValueHandling = NullValueHandling.Ignore)]
		public UnlockSkill3? UnlockSkill3 { get; set; }

		[JsonProperty("Unlock Skill 4", NullValueHandling = NullValueHandling.Ignore)]
		public UnlockSkill? UnlockSkill4 { get; set; }

		[JsonProperty("Unlock Skill 5", NullValueHandling = NullValueHandling.Ignore)]
		public UnlockSkill? UnlockSkill5 { get; set; }

		[JsonProperty("Unlock Skill 6", NullValueHandling = NullValueHandling.Ignore)]
		public UnlockSkill? UnlockSkill6 { get; set; }

		[JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
		public string Description { get; set; }
	}

	public enum UnlockSkill1 { BrachydiosEssence387, CommissionAlchemy417, DeviljhoEssence414, DiablosAmbition411, GlavenusEssence390, GoldRathianEssence396, LunastraEssence405, RajangWill483, SilverRathalosEssence393, The0, TigrexEssence384, ZinogreEssence381, ZorahMagdarosEssence408 };

	public enum UnlockSkill { BrachydiosWill486, FatalisLegend497, FatalisLegend500, FrostfangAbsoluteArt491, GoldRathianEssence404, KulveTarothEssence489, RajangWill482, SilverRathalosEssence403, Survivor469, The0 };

	public enum UnlockSkill3 { BrachydiosWill487, FatalisLegend497, FatalisLegend500, GoldRathianEssence404, RajangWill483, SilverRathalosEssence403, The0 };

	public partial class Skills
	{
		public static Skills[] FromJson(string json) => JsonConvert.DeserializeObject<Skills[]>(json, MediawikiTranslator.Models.Data.MHWI.SkillsConverter.Settings);
	}

	public static class Serialize
	{
		public static string ToJson(this Skills[] self) => JsonConvert.SerializeObject(self, MediawikiTranslator.Models.Data.MHWI.SkillsConverter.Settings);
	}

	internal static class SkillsConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				UnlockSkill1Converter.Singleton,
				UnlockSkillConverter.Singleton,
				UnlockSkill3Converter.Singleton,
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class ParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly ParseStringConverter Singleton = new ParseStringConverter();
	}

	internal class UnlockSkill1Converter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(UnlockSkill1) || t == typeof(UnlockSkill1?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			switch (value)
			{
				case "--------: 0":
					return UnlockSkill1.The0;
				case "Brachydios Essence: 387":
					return UnlockSkill1.BrachydiosEssence387;
				case "Commission Alchemy: 417":
					return UnlockSkill1.CommissionAlchemy417;
				case "Deviljho Essence: 414":
					return UnlockSkill1.DeviljhoEssence414;
				case "Diablos Ambition: 411":
					return UnlockSkill1.DiablosAmbition411;
				case "Glavenus Essence: 390":
					return UnlockSkill1.GlavenusEssence390;
				case "Gold Rathian Essence: 396":
					return UnlockSkill1.GoldRathianEssence396;
				case "Lunastra Essence: 405":
					return UnlockSkill1.LunastraEssence405;
				case "Rajang Will: 483":
					return UnlockSkill1.RajangWill483;
				case "Silver Rathalos Essence: 393":
					return UnlockSkill1.SilverRathalosEssence393;
				case "Tigrex Essence: 384":
					return UnlockSkill1.TigrexEssence384;
				case "Zinogre Essence: 381":
					return UnlockSkill1.ZinogreEssence381;
				case "Zorah Magdaros Essence: 408":
					return UnlockSkill1.ZorahMagdarosEssence408;
			}
			throw new Exception("Cannot unmarshal type UnlockSkill1");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (UnlockSkill1)untypedValue;
			switch (value)
			{
				case UnlockSkill1.The0:
					serializer.Serialize(writer, "--------: 0");
					return;
				case UnlockSkill1.BrachydiosEssence387:
					serializer.Serialize(writer, "Brachydios Essence: 387");
					return;
				case UnlockSkill1.CommissionAlchemy417:
					serializer.Serialize(writer, "Commission Alchemy: 417");
					return;
				case UnlockSkill1.DeviljhoEssence414:
					serializer.Serialize(writer, "Deviljho Essence: 414");
					return;
				case UnlockSkill1.DiablosAmbition411:
					serializer.Serialize(writer, "Diablos Ambition: 411");
					return;
				case UnlockSkill1.GlavenusEssence390:
					serializer.Serialize(writer, "Glavenus Essence: 390");
					return;
				case UnlockSkill1.GoldRathianEssence396:
					serializer.Serialize(writer, "Gold Rathian Essence: 396");
					return;
				case UnlockSkill1.LunastraEssence405:
					serializer.Serialize(writer, "Lunastra Essence: 405");
					return;
				case UnlockSkill1.RajangWill483:
					serializer.Serialize(writer, "Rajang Will: 483");
					return;
				case UnlockSkill1.SilverRathalosEssence393:
					serializer.Serialize(writer, "Silver Rathalos Essence: 393");
					return;
				case UnlockSkill1.TigrexEssence384:
					serializer.Serialize(writer, "Tigrex Essence: 384");
					return;
				case UnlockSkill1.ZinogreEssence381:
					serializer.Serialize(writer, "Zinogre Essence: 381");
					return;
				case UnlockSkill1.ZorahMagdarosEssence408:
					serializer.Serialize(writer, "Zorah Magdaros Essence: 408");
					return;
			}
			throw new Exception("Cannot marshal type UnlockSkill1");
		}

		public static readonly UnlockSkill1Converter Singleton = new UnlockSkill1Converter();
	}

	internal class UnlockSkillConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(UnlockSkill) || t == typeof(UnlockSkill?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			switch (value)
			{
				case "--------: 0":
					return UnlockSkill.The0;
				case "Brachydios Will: 486":
					return UnlockSkill.BrachydiosWill486;
				case "Fatalis Legend: 497":
					return UnlockSkill.FatalisLegend497;
				case "Fatalis Legend: 500":
					return UnlockSkill.FatalisLegend500;
				case "Frostfang Absolute Art: 491":
					return UnlockSkill.FrostfangAbsoluteArt491;
				case "Gold Rathian Essence: 404":
					return UnlockSkill.GoldRathianEssence404;
				case "Kulve Taroth Essence: 489":
					return UnlockSkill.KulveTarothEssence489;
				case "Rajang Will: 482":
					return UnlockSkill.RajangWill482;
				case "Silver Rathalos Essence: 403":
					return UnlockSkill.SilverRathalosEssence403;
				case "Survivor: 469":
					return UnlockSkill.Survivor469;
			}
			throw new Exception("Cannot unmarshal type UnlockSkill");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (UnlockSkill)untypedValue;
			switch (value)
			{
				case UnlockSkill.The0:
					serializer.Serialize(writer, "--------: 0");
					return;
				case UnlockSkill.BrachydiosWill486:
					serializer.Serialize(writer, "Brachydios Will: 486");
					return;
				case UnlockSkill.FatalisLegend497:
					serializer.Serialize(writer, "Fatalis Legend: 497");
					return;
				case UnlockSkill.FatalisLegend500:
					serializer.Serialize(writer, "Fatalis Legend: 500");
					return;
				case UnlockSkill.FrostfangAbsoluteArt491:
					serializer.Serialize(writer, "Frostfang Absolute Art: 491");
					return;
				case UnlockSkill.GoldRathianEssence404:
					serializer.Serialize(writer, "Gold Rathian Essence: 404");
					return;
				case UnlockSkill.KulveTarothEssence489:
					serializer.Serialize(writer, "Kulve Taroth Essence: 489");
					return;
				case UnlockSkill.RajangWill482:
					serializer.Serialize(writer, "Rajang Will: 482");
					return;
				case UnlockSkill.SilverRathalosEssence403:
					serializer.Serialize(writer, "Silver Rathalos Essence: 403");
					return;
				case UnlockSkill.Survivor469:
					serializer.Serialize(writer, "Survivor: 469");
					return;
			}
			throw new Exception("Cannot marshal type UnlockSkill");
		}

		public static readonly UnlockSkillConverter Singleton = new UnlockSkillConverter();
	}

	internal class UnlockSkill3Converter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(UnlockSkill3) || t == typeof(UnlockSkill3?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			switch (value)
			{
				case "--------: 0":
					return UnlockSkill3.The0;
				case "Brachydios Will: 487":
					return UnlockSkill3.BrachydiosWill487;
				case "Fatalis Legend: 497":
					return UnlockSkill3.FatalisLegend497;
				case "Fatalis Legend: 500":
					return UnlockSkill3.FatalisLegend500;
				case "Gold Rathian Essence: 404":
					return UnlockSkill3.GoldRathianEssence404;
				case "Rajang Will: 483":
					return UnlockSkill3.RajangWill483;
				case "Silver Rathalos Essence: 403":
					return UnlockSkill3.SilverRathalosEssence403;
			}
			throw new Exception("Cannot unmarshal type UnlockSkill3");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (UnlockSkill3)untypedValue;
			switch (value)
			{
				case UnlockSkill3.The0:
					serializer.Serialize(writer, "--------: 0");
					return;
				case UnlockSkill3.BrachydiosWill487:
					serializer.Serialize(writer, "Brachydios Will: 487");
					return;
				case UnlockSkill3.FatalisLegend497:
					serializer.Serialize(writer, "Fatalis Legend: 497");
					return;
				case UnlockSkill3.FatalisLegend500:
					serializer.Serialize(writer, "Fatalis Legend: 500");
					return;
				case UnlockSkill3.GoldRathianEssence404:
					serializer.Serialize(writer, "Gold Rathian Essence: 404");
					return;
				case UnlockSkill3.RajangWill483:
					serializer.Serialize(writer, "Rajang Will: 483");
					return;
				case UnlockSkill3.SilverRathalosEssence403:
					serializer.Serialize(writer, "Silver Rathalos Essence: 403");
					return;
			}
			throw new Exception("Cannot marshal type UnlockSkill3");
		}

		public static readonly UnlockSkill3Converter Singleton = new UnlockSkill3Converter();
	}
}
