// <auto-generated />
using System.Globalization;
using DocumentFormat.OpenXml.Drawing;
using MediawikiTranslator.Generators;
using MediawikiTranslator.Models.Data.MHRS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWI
{
	public partial class SkillDescriptions
	{
		[JsonProperty("LevelId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(FluffyParseStringConverter))]
		public long? LevelId { get; set; }

		[JsonProperty("SkillId", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(FluffyParseStringConverter))]
		public long? SkillId { get; set; }

		[JsonProperty("Level", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(FluffyParseStringConverter))]
		public long? Level { get; set; }

		[JsonProperty("SkillName", NullValueHandling = NullValueHandling.Ignore)]
		public string SkillName { get; set; }

		[JsonProperty("SkillDescription", NullValueHandling = NullValueHandling.Ignore)]
		public string SkillDescription { get; set; }

		[JsonProperty("LevelDescription", NullValueHandling = NullValueHandling.Ignore)]
		public string LevelDescription { get; set; }

		[JsonProperty("WikiIconColor", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(FluffyParseStringConverter))]
		public long? WikiIconColor { get; set; }

		[JsonProperty("IsSetBonus", NullValueHandling = NullValueHandling.Ignore)]
		[JsonConverter(typeof(PurpleParseStringConverter))]
		public bool? IsSetBonus { get; set; }

		public static SkillDescriptions[] GetSkillDescriptions()
		{
			return FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\skills.json")).Where(x => x.SkillName != "Unavailable" && x.SkillId!.Value > 0).ToArray();
		}

		public static void GetDecorationsBySkill()
		{
			Dictionary<string, DecoSkill[]> ret = [];
			SkillDescriptions[] allSkills = GetSkillDescriptions();
			Decorations[] allDecos = Decorations.GetDecorations();
			foreach (var skill in allSkills.Where(x => !string.IsNullOrEmpty(x.SkillName)).OrderBy(x => x.SkillName).GroupBy(x => new { SkillId = x.SkillId!.Value, x.SkillName, Level = x.Level }).Select(x => x.Key).ToArray())
			{
				if (!ret.ContainsKey(skill.SkillName))
				{
					Decorations[] matches = allDecos
						.Where(x => x.Skills.Any(y => y != null && y.SkillId == skill.SkillId && y.Level == skill.Level))
						.Where(x => !string.IsNullOrEmpty(x.Name))
						.OrderBy(x => x.Name).ToArray();
					List<DecoSkill> skillsForDeco = [];
					foreach (Decorations match in matches)
					{
						foreach (SkillDescriptions thisSkill in match.Skills.Where(x => x != null))
						{
							if (thisSkill.SkillId == skill.SkillId)
							{
								skillsForDeco.Add(new DecoSkill()
								{
									Level = (int)thisSkill.Level,
									Name = match.Name,
									Rarity = (int)Decorations.GetRarity(match.ItemId!.Value),
									WikiIconColor = match.WikiIconColor
								});
							}
						}
					}
					ret.Add(skill.SkillName, [.. skillsForDeco]);
				}
			}
			File.WriteAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWI\decos by skill.json", JsonConvert.SerializeObject(ret, Formatting.Indented));
		}

		public static void WriteSimplifiedSkills()
		{
			Models.Data.MHWI.Skills[] mhwiSkills = Models.Data.MHWI.Skills.FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWI\mhwi skills.json"));
			SkillsExtraInfo[] mhwiSkillsExtraInfo = SkillsExtraInfo.FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWI\mhwi skills extra info.json"));
			File.WriteAllText(@"D:\MH_Data Repo\MH_Data\Parsed Files\MHWI\mhwi_skills_simplified.json", Newtonsoft.Json.JsonConvert.SerializeObject(SkillDescriptions.GetSimplifiedSkills().OrderBy(x => x.Name), Newtonsoft.Json.Formatting.Indented));
		}

		public static SimplifiedSkill[] GetSimplifiedSkills()
		{
			Skills[] allBaseSkills = Skills.GetSkills();
			SetSkills[] setSkills = SetSkills.FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\setskills.json"));
			Dictionary<int, string> colors = MediawikiTranslator.Generators.Items.GetMHWIWikiColors();
			SkillDescriptions[] allSkillDescriptions = [.. SkillDescriptions.GetSkillDescriptions().OrderBy(x => x.SkillName).ThenBy(x => x.Level)];
			Dictionary<long, SimplifiedSkill> simpSkills = [];
			foreach (SkillDescriptions skill in allSkillDescriptions)
			{
				SimplifiedSkill simplifiedSkill = new SimplifiedSkill();
				if (simpSkills.ContainsKey(skill.SkillId!.Value))
				{
					simplifiedSkill = simpSkills[skill.SkillId!.Value];
				}
				if (skill.Level > simplifiedSkill.MaxLevel)
				{
					simplifiedSkill.MaxLevel = (int)skill.Level;
				}
				simplifiedSkill.Id = (int)skill.SkillId!;
				if (!simplifiedSkill.LevelDetails.ContainsKey((int)skill.Level))
				{
					simplifiedSkill.LevelDetails.Add((int)skill.Level, new SkillLevelInfo()
					{
						Description = skill.LevelDescription,
						RequiresSecret = (allBaseSkills.FirstOrDefault(x => Convert.ToInt32(x.Id.Substring(0, x.Id.IndexOf(":"))) == skill.SkillId!.Value && x.Level == skill.Level!.Value)?.UnlockSkill1 ?? "0: --------") != "0: --------"
					});
				}
				if (skill.IsSetBonus == true)
				{
					SetSkills thisSetSkill = setSkills.First(x => x.SetBonusIndex == skill.LevelId!.Value);
					if (simplifiedSkill.SkillGrantedByBonus1 == null)
					{
						simplifiedSkill.SkillGrantedByBonus1 = thisSetSkill.SetBonusSkillName;
						simplifiedSkill.SkillGrantedByBonus1_PiecesRequired = (int)skill.Level!.Value;
					}
					else
					{
						simplifiedSkill.SkillGrantedByBonus2 = thisSetSkill.SetBonusSkillName;
						simplifiedSkill.SkillGrantedByBonus2_PiecesRequired = (int)skill.Level!.Value;
					}
				}
				simplifiedSkill.Name = skill.SkillName;
				simplifiedSkill.Description = skill.SkillDescription;
				simplifiedSkill.WikiIconColor = colors[(int)skill.WikiIconColor!.Value];
				if (!simpSkills.ContainsKey(skill.SkillId!.Value))
				{
					simpSkills.Add(skill.SkillId!.Value, simplifiedSkill);
				}
			}
			return [.. simpSkills.Values];
		}
	}

	public class SkillLevelInfo()
	{
		public string Description { get; set; }
		public bool RequiresSecret { get; set; }
	}

	public partial class SkillDescriptions
	{
		public static SkillDescriptions[] FromJson(string json) => JsonConvert.DeserializeObject<SkillDescriptions[]>(json, MediawikiTranslator.Models.Data.MHWI.SkillDescriptionsConverter.Settings);
	}

	internal static class SkillDescriptionsConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class PurpleParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			bool b;
			if (Boolean.TryParse(value, out b))
			{
				return b;
			}
			throw new Exception("Cannot unmarshal type bool");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (bool)untypedValue;
			var boolString = value ? "true" : "false";
			serializer.Serialize(writer, boolString);
			return;
		}

		public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
	}

	internal class FluffyParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
	}
}

