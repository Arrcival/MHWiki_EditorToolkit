// <auto-generated />
using System.Globalization;
using System.Text;
using DocumentFormat.OpenXml.Drawing;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHWI
{
    public partial class Items
    {
        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Sub Type", NullValueHandling = NullValueHandling.Ignore)]
        public SubType? SubType { get; set; }

        [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("Rarity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rarity { get; set; }

        [JsonProperty("Carry Limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? CarryLimit { get; set; }

        [JsonProperty("Carry Limit (Non-IB)", NullValueHandling = NullValueHandling.Ignore)]
        public long? CarryLimitNonIb { get; set; }

        [JsonProperty("Sort Order", NullValueHandling = NullValueHandling.Ignore)]
        public long? SortOrder { get; set; }

        [JsonProperty("Icon Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? IconId { get; set; }

        [JsonProperty("Wiki Icon Name", NullValueHandling = NullValueHandling.Ignore)]
        public string WikiIconName { get; set; }

        [JsonProperty("Icon Color Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? IconColorId { get; set; }

        [JsonProperty("Wiki Icon Color", NullValueHandling = NullValueHandling.Ignore)]
        public WikiIconColor? WikiIconColor { get; set; }

        [JsonProperty("Sell Price", NullValueHandling = NullValueHandling.Ignore)]
        public long? SellPrice { get; set; }

        [JsonProperty("Buy Price", NullValueHandling = NullValueHandling.Ignore)]
        public long? BuyPrice { get; set; }

        [JsonProperty("Flags", NullValueHandling = NullValueHandling.Ignore)]
        public long? Flags { get; set; }

        [JsonProperty("Has Infinity Symbol", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasInfinitySymbol { get; set; }

        [JsonProperty("Is Supply Item", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsSupplyItem { get; set; }

        [JsonProperty("Unknown", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Unknown { get; set; }

        [JsonProperty("Is Consumable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsConsumable { get; set; }

        [JsonProperty("If Fey or Streamstone", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IfFeyOrStreamstone { get; set; }

        [JsonProperty("Is Infinite Use", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsInfiniteUse { get; set; }

        [JsonProperty("Has Star", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasStar { get; set; }

        [JsonProperty("Has New Palico Gadget Symbol", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasNewPalicoGadgetSymbol { get; set; }

        [JsonProperty("Is Level 1", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLevel1 { get; set; }

        [JsonProperty("Is Level 2", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLevel2 { get; set; }

        [JsonProperty("Is Level 3", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLevel3 { get; set; }

        [JsonProperty("Is Shiny", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsShiny { get; set; }

        [JsonProperty("Is Huge Carriable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsHugeCarriable { get; set; }

        [JsonProperty("Not Storable as an Item", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NotStorableAsAnItem { get; set; }

        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public enum SubType { Ammo, Coating, None };

    public enum TypeEnum { AccountItem, AmmoOrCoating, Item, Jewel, Material, RoomDecoration };

    public enum WikiIconColor { Blue, Brown, DarkPurple, Emerald, Gray, Green, Lemon, LightBlue, Moss, NA, NotAvailable, Orange, Pink, Purple, Red, Rose, Tan, Violet, White, Yellow, Vermilion, LightGreen };

    public partial class Items
    {
        public static Items[] Fetch() => JsonConvert.DeserializeObject<Items[]>(Encoding.UTF8.GetString(Properties.Resources.mhwi_items), MediawikiTranslator.Models.Data.MHWI.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SubTypeConverter.Singleton,
                TypeEnumConverter.Singleton,
                WikiIconColorConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class SubTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubType) || t == typeof(SubType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Ammo":
                    return SubType.Ammo;
                case "Coating":
                    return SubType.Coating;
                case "None":
                    return SubType.None;
            }
            throw new Exception("Cannot unmarshal type SubType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SubType)untypedValue;
            switch (value)
            {
                case SubType.Ammo:
                    serializer.Serialize(writer, "Ammo");
                    return;
                case SubType.Coating:
                    serializer.Serialize(writer, "Coating");
                    return;
                case SubType.None:
                    serializer.Serialize(writer, "None");
                    return;
            }
            throw new Exception("Cannot marshal type SubType");
        }

        public static readonly SubTypeConverter Singleton = new SubTypeConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Account_Item":
                    return TypeEnum.AccountItem;
                case "Ammo_or_Coating":
                    return TypeEnum.AmmoOrCoating;
                case "Item":
                    return TypeEnum.Item;
                case "Jewel":
                    return TypeEnum.Jewel;
                case "Material":
                    return TypeEnum.Material;
                case "Room_Decoration":
                    return TypeEnum.RoomDecoration;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.AccountItem:
                    serializer.Serialize(writer, "Account_Item");
                    return;
                case TypeEnum.AmmoOrCoating:
                    serializer.Serialize(writer, "Ammo_or_Coating");
                    return;
                case TypeEnum.Item:
                    serializer.Serialize(writer, "Item");
                    return;
                case TypeEnum.Jewel:
                    serializer.Serialize(writer, "Jewel");
                    return;
                case TypeEnum.Material:
                    serializer.Serialize(writer, "Material");
                    return;
                case TypeEnum.RoomDecoration:
                    serializer.Serialize(writer, "Room_Decoration");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class WikiIconColorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WikiIconColor) || t == typeof(WikiIconColor?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "#N/A":
                    return WikiIconColor.NA;
                case "Blue":
                    return WikiIconColor.Blue;
                case "Brown":
                    return WikiIconColor.Brown;
                case "Dark Purple":
                    return WikiIconColor.DarkPurple;
                case "Emerald":
                    return WikiIconColor.Emerald;
                case "Gray":
                    return WikiIconColor.Gray;
                case "Green":
                    return WikiIconColor.Green;
                case "Lemon":
                    return WikiIconColor.Lemon;
                case "Light Blue":
                    return WikiIconColor.LightBlue;
                case "Moss":
                    return WikiIconColor.Moss;
                case "NOT AVAILABLE":
                    return WikiIconColor.NotAvailable;
                case "Orange":
                    return WikiIconColor.Orange;
                case "Pink":
                    return WikiIconColor.Pink;
                case "Purple":
                    return WikiIconColor.Purple;
                case "Red":
                    return WikiIconColor.Red;
                case "Rose":
                    return WikiIconColor.Rose;
                case "Tan":
                    return WikiIconColor.Tan;
                case "Violet":
                    return WikiIconColor.Violet;
                case "White":
                    return WikiIconColor.White;
                case "Yellow":
                    return WikiIconColor.Yellow;
                case "Vermilion":
                    return WikiIconColor.Vermilion;
				case "Light Green":
					return WikiIconColor.LightGreen;
			}
            throw new Exception("Cannot unmarshal type WikiIconColor");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WikiIconColor)untypedValue;
            switch (value)
            {
                case WikiIconColor.NA:
                    serializer.Serialize(writer, "#N/A");
                    return;
                case WikiIconColor.Blue:
                    serializer.Serialize(writer, "Blue");
                    return;
                case WikiIconColor.Brown:
                    serializer.Serialize(writer, "Brown");
                    return;
                case WikiIconColor.DarkPurple:
                    serializer.Serialize(writer, "Dark Purple");
                    return;
                case WikiIconColor.Emerald:
                    serializer.Serialize(writer, "Emerald");
                    return;
                case WikiIconColor.Gray:
                    serializer.Serialize(writer, "Gray");
                    return;
                case WikiIconColor.Green:
                    serializer.Serialize(writer, "Green");
                    return;
                case WikiIconColor.Lemon:
                    serializer.Serialize(writer, "Lemon");
                    return;
                case WikiIconColor.LightBlue:
                    serializer.Serialize(writer, "Light Blue");
                    return;
                case WikiIconColor.Moss:
                    serializer.Serialize(writer, "Moss");
                    return;
                case WikiIconColor.NotAvailable:
                    serializer.Serialize(writer, "NOT AVAILABLE");
                    return;
                case WikiIconColor.Orange:
                    serializer.Serialize(writer, "Orange");
                    return;
                case WikiIconColor.Pink:
                    serializer.Serialize(writer, "Pink");
                    return;
                case WikiIconColor.Purple:
                    serializer.Serialize(writer, "Purple");
                    return;
                case WikiIconColor.Red:
                    serializer.Serialize(writer, "Red");
                    return;
                case WikiIconColor.Rose:
                    serializer.Serialize(writer, "Rose");
                    return;
                case WikiIconColor.Tan:
                    serializer.Serialize(writer, "Tan");
                    return;
                case WikiIconColor.Violet:
                    serializer.Serialize(writer, "Violet");
                    return;
                case WikiIconColor.White:
                    serializer.Serialize(writer, "White");
                    return;
                case WikiIconColor.Yellow:
                    serializer.Serialize(writer, "Yellow");
                    return;
				case WikiIconColor.Vermilion:
					serializer.Serialize(writer, "Vermilion");
					return;
				case WikiIconColor.LightGreen:
					serializer.Serialize(writer, "Light Green");
					return;
			}
            throw new Exception("Cannot marshal type WikiIconColor");
        }

        public static readonly WikiIconColorConverter Singleton = new WikiIconColorConverter();
    }
}
