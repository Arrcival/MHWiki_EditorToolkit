// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MediawikiTranslator.Models.Data.MHWI;
//
//    var shellTable = ShellTable.FromJson(jsonString);

namespace MediawikiTranslator.Models.Data.MHWI
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class ShellTable
	{
		[JsonProperty("capacity", NullValueHandling = NullValueHandling.Ignore)]
		public long? Capacity { get; set; }

		[JsonProperty("recoilType", NullValueHandling = NullValueHandling.Ignore)]
		public string RecoilType { get; set; }

		[JsonProperty("reloadSpeed", NullValueHandling = NullValueHandling.Ignore)]
		public string ReloadSpeed { get; set; }

		[JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		public static Dictionary<string, ShellTable[]> GetShellTables()
		{
			return FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHWI\chunk\common\equip\shelltable.json"));
		}
	}

	public partial class ShellTable
	{
		public static Dictionary<string, ShellTable[]> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, ShellTable[]>>(json, MediawikiTranslator.Models.Data.MHWI.ShellTableConverter.Settings);
	}

	internal static class ShellTableConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}
}
